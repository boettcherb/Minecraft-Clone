#ifndef BLOCK_TYPE_H_INCLUDED
#define BLOCK_TYPE_H_INCLUDED

namespace Block {

    inline constexpr unsigned int FACES_PER_BLOCK = 6;
    inline constexpr unsigned int VERTICES_PER_FACE = 6;
    inline constexpr unsigned int VERTICES_PER_BLOCK = VERTICES_PER_FACE * FACES_PER_BLOCK;
    inline constexpr unsigned int UINTS_PER_VERTEX = 1;
    inline constexpr unsigned int UINTS_PER_FACE = VERTICES_PER_FACE * UINTS_PER_VERTEX;
    inline constexpr unsigned int BYTES_PER_FACE = UINTS_PER_FACE * sizeof(unsigned int);

    enum class BlockType : unsigned char {
        AIR,
        GRASS,
        DIRT,
        STONE,
    };

    enum class BlockFace : unsigned char {
        PLUS_X,
        MINUS_X,
        PLUS_Y,
        MINUS_Y,
        PLUS_Z,
        MINUS_Z,
    };

    const unsigned int* getData(BlockType type, BlockFace face);
    bool isTransparent(BlockType type);
    
    inline constexpr unsigned int GRASS_BLOCK_DATA[] = {
        //posX     posY    posZ  texX  texY
        0b00001'000000000'00001'00000'01111, // right (+x)
        0b00001'000000000'00000'00001'01111,
        0b00001'000000001'00000'00001'10000,
        0b00001'000000001'00000'00001'10000,
        0b00001'000000001'00001'00000'10000,
        0b00001'000000000'00001'00000'01111,

        0b00000'000000000'00000'00000'01111, // left (-x)
        0b00000'000000000'00001'00001'01111,
        0b00000'000000001'00001'00001'10000,
        0b00000'000000001'00001'00001'10000,
        0b00000'000000001'00000'00000'10000,
        0b00000'000000000'00000'00000'01111,

        0b00000'000000001'00001'00010'01111, // top (+y)
        0b00001'000000001'00001'00011'01111,
        0b00001'000000001'00000'00011'10000,
        0b00001'000000001'00000'00011'10000,
        0b00000'000000001'00000'00010'10000,
        0b00000'000000001'00001'00010'01111,

        0b00000'000000000'00000'00001'01111, // bottom (-y)
        0b00001'000000000'00000'00010'01111,
        0b00001'000000000'00001'00010'10000,
        0b00001'000000000'00001'00010'10000,
        0b00000'000000000'00001'00001'10000,
        0b00000'000000000'00000'00001'01111,

        0b00000'000000000'00001'00000'01111, // front (+z)
        0b00001'000000000'00001'00001'01111,
        0b00001'000000001'00001'00001'10000,
        0b00001'000000001'00001'00001'10000,
        0b00000'000000001'00001'00000'10000,
        0b00000'000000000'00001'00000'01111,

        0b00001'000000000'00000'00000'01111, // back (-z)
        0b00000'000000000'00000'00001'01111,
        0b00000'000000001'00000'00001'10000,
        0b00000'000000001'00000'00001'10000,
        0b00001'000000001'00000'00000'10000,
        0b00001'000000000'00000'00000'01111,
    };

    inline constexpr unsigned int DIRT_BLOCK_DATA[] = {
        //posX     posY    posZ  texX  texY
        0b00001'000000000'00001'00001'01111, // right (+x)
        0b00001'000000000'00000'00010'01111,
        0b00001'000000001'00000'00010'10000,
        0b00001'000000001'00000'00010'10000,
        0b00001'000000001'00001'00001'10000,
        0b00001'000000000'00001'00001'01111,

        0b00000'000000000'00000'00001'01111, // left (-x)
        0b00000'000000000'00001'00010'01111,
        0b00000'000000001'00001'00010'10000,
        0b00000'000000001'00001'00010'10000,
        0b00000'000000001'00000'00001'10000,
        0b00000'000000000'00000'00001'01111,

        0b00000'000000001'00001'00001'01111, // top (+y)
        0b00001'000000001'00001'00010'01111,
        0b00001'000000001'00000'00010'10000,
        0b00001'000000001'00000'00010'10000,
        0b00000'000000001'00000'00001'10000,
        0b00000'000000001'00001'00001'01111,

        0b00000'000000000'00000'00001'01111, // bottom (-y)
        0b00001'000000000'00000'00010'01111,
        0b00001'000000000'00001'00010'10000,
        0b00001'000000000'00001'00010'10000,
        0b00000'000000000'00001'00001'10000,
        0b00000'000000000'00000'00001'01111,

        0b00000'000000000'00001'00001'01111, // front (+z)
        0b00001'000000000'00001'00010'01111,
        0b00001'000000001'00001'00010'10000,
        0b00001'000000001'00001'00010'10000,
        0b00000'000000001'00001'00001'10000,
        0b00000'000000000'00001'00001'01111,

        0b00001'000000000'00000'00001'01111, // back (-z)
        0b00000'000000000'00000'00010'01111,
        0b00000'000000001'00000'00010'10000,
        0b00000'000000001'00000'00010'10000,
        0b00001'000000001'00000'00001'10000,
        0b00001'000000000'00000'00001'01111,
    };

    inline constexpr unsigned int STONE_BLOCK_DATA[] = {
        //posX     posY    posZ  texX  texY
        0b00001'000000000'00001'00011'01111, // right (+x)
        0b00001'000000000'00000'00100'01111,
        0b00001'000000001'00000'00100'10000,
        0b00001'000000001'00000'00100'10000,
        0b00001'000000001'00001'00011'10000,
        0b00001'000000000'00001'00011'01111,

        0b00000'000000000'00000'00011'01111, // left (-x)
        0b00000'000000000'00001'00100'01111,
        0b00000'000000001'00001'00100'10000,
        0b00000'000000001'00001'00100'10000,
        0b00000'000000001'00000'00011'10000,
        0b00000'000000000'00000'00011'01111,

        0b00000'000000001'00001'00011'01111, // top (+y)
        0b00001'000000001'00001'00100'01111,
        0b00001'000000001'00000'00100'10000,
        0b00001'000000001'00000'00100'10000,
        0b00000'000000001'00000'00011'10000,
        0b00000'000000001'00001'00011'01111,

        0b00000'000000000'00000'00011'01111, // bottom (-y)
        0b00001'000000000'00000'00100'01111,
        0b00001'000000000'00001'00100'10000,
        0b00001'000000000'00001'00100'10000,
        0b00000'000000000'00001'00011'10000,
        0b00000'000000000'00000'00011'01111,

        0b00000'000000000'00001'00011'01111, // front (+z)
        0b00001'000000000'00001'00100'01111,
        0b00001'000000001'00001'00100'10000,
        0b00001'000000001'00001'00100'10000,
        0b00000'000000001'00001'00011'10000,
        0b00000'000000000'00001'00011'01111,

        0b00001'000000000'00000'00011'01111, // back (-z)
        0b00000'000000000'00000'00100'01111,
        0b00000'000000001'00000'00100'10000,
        0b00000'000000001'00000'00100'10000,
        0b00001'000000001'00000'00011'10000,
        0b00001'000000000'00000'00011'01111,
    };

}

#endif
